"use strict";(self.webpackChunkcity_skylines_wiki=self.webpackChunkcity_skylines_wiki||[]).push([[502],{5045:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var i=s(6070),t=s(5710);const r={},o="C# Code Standards",a={id:"standards/std-004",title:"C# Code Standards",description:"Code Standards",source:"@site/docs/standards/std-004.md",sourceDirName:"standards",slug:"/standards/std-004",permalink:"/docs/standards/std-004",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Pull Request Standards",permalink:"/docs/standards/std-003"},next:{title:"Markdown Syntax Guide",permalink:"/docs/standards/std-005"}},c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Naming Conventions",id:"naming-conventions",level:2},{value:"General Naming Conventions",id:"general-naming-conventions",level:3},{value:"Namespace Naming Conventions",id:"namespace-naming-conventions",level:3},{value:"Type Naming Conventions",id:"type-naming-conventions",level:3},{value:"Member Naming Conventions",id:"member-naming-conventions",level:3},{value:"Parameter Naming Conventions",id:"parameter-naming-conventions",level:3},{value:"Bracing",id:"bracing",level:2},{value:"Indentation",id:"indentation",level:2},{value:"Comments",id:"comments",level:2},{value:"Documentation Comments",id:"documentation-comments",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Variables",id:"variables",level:2},{value:"Constants",id:"constants",level:2},{value:"Properties",id:"properties",level:2},{value:"Loops",id:"loops",level:2},{value:"Switch Statements",id:"switch-statements",level:2},{value:"Using Statements",id:"using-statements",level:2},{value:"Using Directives",id:"using-directives",level:2},{value:"Code Formatting",id:"code-formatting",level:2},{value:"Null Checking",id:"null-checking",level:2},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"c-code-standards",children:"C# Code Standards"}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"This document describes the coding standards for C# code in the City Skylines project."}),"\n",(0,i.jsx)(n.h2,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,i.jsx)(n.h3,{id:"general-naming-conventions",children:"General Naming Conventions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pascal Case"}),": Use Pascal case for all public member, type, and namespace names consisting of multiple words. Pascal case is identical to camel case, but the first letter of the identifier is capitalized. For example, ",(0,i.jsx)(n.code,{children:"BackColor"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Camel Case"}),": Use camel case for parameter names and local variables. Camel case is identical to Pascal case, but the first letter of the identifier is lowercase. For example, ",(0,i.jsx)(n.code,{children:"backColor"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Abbreviations"}),": Do not use abbreviations in identifiers. For example, use ",(0,i.jsx)(n.code,{children:"GetWindow"})," instead of ",(0,i.jsx)(n.code,{children:"GetWin"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Acronyms"}),": Acronyms should be treated as words in identifiers. For example, use ",(0,i.jsx)(n.code,{children:"XmlHttpRequest"})," instead of ",(0,i.jsx)(n.code,{children:"XMLHTTPRequest"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Underscores"}),": Do not use underscores in identifiers. For example, use ",(0,i.jsx)(n.code,{children:"backColor"})," instead of ",(0,i.jsx)(n.code,{children:"back_Color"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"namespace-naming-conventions",children:"Namespace Naming Conventions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Namespace Naming"}),": Use a single, top-level namespace for the project. The namespace should be the name of the project. For example, the namespace for the City Skylines project is ",(0,i.jsx)(n.code,{children:"CitySkylines"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"type-naming-conventions",children:"Type Naming Conventions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Class Naming"}),": Use nouns or noun phrases to name classes. Class names should be clear and descriptive. For example, use ",(0,i.jsx)(n.code,{children:"Customer"})," instead of ",(0,i.jsx)(n.code,{children:"Data"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Interface Naming"}),": Use a noun or noun phrase to name interfaces. Interface names should be clear and descriptive. For example, use ",(0,i.jsx)(n.code,{children:"ILogger"})," instead of ",(0,i.jsx)(n.code,{children:"ILog"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Enum Naming"}),": Use a singular noun for enum types. Enum names should be clear and descriptive. For example, use ",(0,i.jsx)(n.code,{children:"DayOfWeek"})," instead of ",(0,i.jsx)(n.code,{children:"Days"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"member-naming-conventions",children:"Member Naming Conventions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Property Naming"}),": Use nouns or noun phrases to name properties. Property names should be clear and descriptive. For example, use ",(0,i.jsx)(n.code,{children:"FirstName"})," instead of ",(0,i.jsx)(n.code,{children:"Name"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Method Naming"}),": Use verbs or verb phrases to name methods. Method names should be clear and descriptive. For example, use ",(0,i.jsx)(n.code,{children:"CalculateTotal"})," instead of ",(0,i.jsx)(n.code,{children:"Calculate"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event Naming"}),": Use a verb or verb phrase to name events. Event names should be clear and descriptive. For example, use ",(0,i.jsx)(n.code,{children:"Click"})," instead of ",(0,i.jsx)(n.code,{children:"OnClick"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"parameter-naming-conventions",children:"Parameter Naming Conventions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameter Naming"}),": Use camel case for parameter names. Parameter names should be clear and descriptive. For example, use ",(0,i.jsx)(n.code,{children:"customerName"})," instead of ",(0,i.jsx)(n.code,{children:"name"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"bracing",children:"Bracing"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Brace Placement"}),": Place the opening brace on the same line as the statement it belongs to. Place the closing brace on a new line by itself. For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"if (condition)\n{\n    // Code here\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"indentation",children:"Indentation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Indentation"}),": Use four spaces for indentation. Do not use tabs for indentation."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"comments",children:"Comments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Comments"}),": Use comments to explain the intent of the code. Comments should be clear and concise. Use comments to explain complex algorithms, business rules, or design decisions. Comments should be written in English."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// Calculate the total price of the items in the cart\npublic decimal CalculateTotal() {\n    decimal total = 0;\n\n    foreach (var item in cartItems) {\n        total += item.Price;\n    }\n\n    return total;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"documentation-comments",children:"Documentation Comments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Documentation Comments"}),": Use XML documentation comments to document types and members. Documentation comments should describe the purpose of the type or member, its parameters, return value, and exceptions that can be thrown. Documentation comments should be written in English."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"/// <summary>\n/// Represents a customer in the system.\n/// </summary>\npublic class Customer {\n    /// <summary>\n    /// Gets or sets the customer's first name.\n    /// </summary>\n    public string FirstName { get; set; }\n\n    /// <summary>\n    /// Gets or sets the customer's last name.\n    /// </summary>\n    public string LastName { get; set; }\n\n    /// <summary>\n    /// Gets the customer's full name.\n    /// </summary>\n    public string FullName {\n        get {\n            return $\"{FirstName} {LastName}\";\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error Handling"}),": Use exceptions to handle errors and unexpected conditions. Do not use exceptions for normal control flow. Use specific exception types to indicate the type of error that occurred. Catch exceptions at the appropriate level and handle them appropriately."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'try {\n    // Code that may throw an exception\n} catch (Exception ex) {\n    // Handle the exception\n}\n\nthrow new InvalidOperationException("Invalid operation");\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Exception Handling"}),": Use specific exception types to indicate the type of error that occurred. Use ",(0,i.jsx)(n.code,{children:"try-catch"})," blocks to handle exceptions. Use ",(0,i.jsx)(n.code,{children:"throw"})," statements to rethrow exceptions."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"try {\n    // Code that may throw an exception\n} catch (ArgumentNullException ex) {\n    // Handle ArgumentNullException\n} catch (InvalidOperationException ex) {\n    // Handle InvalidOperationException\n} catch (Exception ex) {\n    // Handle other exceptions\n    throw;\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Custom Exceptions"}),": Use custom exception types to represent specific errors in the application. Create custom exception classes that inherit from the ",(0,i.jsx)(n.code,{children:"Exception"})," class."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class CustomException : Exception {\n    public CustomException(string message) : base(message) {\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Logging Exceptions"}),": Use a logging framework to log exceptions. Log exceptions at the appropriate level and include relevant information such as the exception message, stack trace, and inner exceptions."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'try {\n    // Code that may throw an exception\n} catch (Exception ex) {\n    logger.Error(ex, "An error occurred");\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"variables",children:"Variables"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Variable Declaration"}),": Declare variables close to where they are used. Use meaningful variable names that describe the purpose of the variable. Use the ",(0,i.jsx)(n.code,{children:"var"})," keyword for local variables when the type is obvious from the initialization expression."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'var firstName = "John";\nvar lastName = "Doe";\n'})}),"\n",(0,i.jsx)(n.h2,{id:"constants",children:"Constants"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Constants"}),": Use ",(0,i.jsx)(n.code,{children:"const"})," for values that do not change. Use ",(0,i.jsx)(n.code,{children:"readonly"})," for values that are initialized at runtime. Use uppercase letters and underscores for constant names."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public const int MaxItems = 10;\npublic readonly string ConnectionString = "Server=localhost;Database=Northwind;User=sa;Password=pass";\n'})}),"\n",(0,i.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Auto-Implemented Properties"}),": Use auto-implemented properties for simple properties that do not require additional logic in the getter or setter."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public string FirstName { get; set; }\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Full Properties"}),": Use full properties for properties that require additional logic in the getter or setter."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"private string firstName;\n\npublic string FirstName {\n    get {\n        return firstName;\n    }\n    set {\n        firstName = value;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"loops",children:"Loops"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"For Loop"}),": Use a ",(0,i.jsx)(n.code,{children:"for"})," loop when the number of iterations is known. Use a ",(0,i.jsx)(n.code,{children:"for"})," loop to iterate over a range of values."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"for (int i = 0; i < 10; i++) {\n    // Code here\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Foreach Loop"}),": Use a ",(0,i.jsx)(n.code,{children:"foreach"})," loop to iterate over a collection. Use a ",(0,i.jsx)(n.code,{children:"foreach"})," loop when the number of iterations is not known."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"foreach (var item in items) {\n    // Code here\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"While Loop"}),": Use a ",(0,i.jsx)(n.code,{children:"while"})," loop when the number of iterations is not known. Use a ",(0,i.jsx)(n.code,{children:"while"})," loop to iterate until a condition is met."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"while (condition) {\n    // Code here\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"switch-statements",children:"Switch Statements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Switch Statement"}),": Use a ",(0,i.jsx)(n.code,{children:"switch"})," statement to select one of several code blocks to execute. Use a ",(0,i.jsx)(n.code,{children:"switch"})," statement when there are multiple cases to handle."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"switch (day) {\n    case DayOfWeek.Monday:\n        // Code here\n        break;\n    case DayOfWeek.Tuesday:\n        // Code here\n        break;\n    default:\n        // Code here\n        break;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"using-statements",children:"Using Statements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Using Statements"}),": Use ",(0,i.jsx)(n.code,{children:"using"})," statements to ensure that resources are properly disposed of. Use ",(0,i.jsx)(n.code,{children:"using"})," statements for types that implement the ",(0,i.jsx)(n.code,{children:"IDisposable"})," interface. Do not use ",(0,i.jsx)(n.code,{children:"using"})," statements for types that do not implement the ",(0,i.jsx)(n.code,{children:"IDisposable"})," interface."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using (var stream = new FileStream("file.txt", FileMode.Open)) {\n    // Code here\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"using-directives",children:"Using Directives"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Using Directives"}),": Use ",(0,i.jsx)(n.code,{children:"using"})," directives to import namespaces at the top of the file. Use separate ",(0,i.jsx)(n.code,{children:"using"})," directives for each namespace. Do not use ",(0,i.jsx)(n.code,{children:"using"})," directives for namespaces that are not used in the file."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"code-formatting",children:"Code Formatting"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Code Formatting"}),": Use a consistent code formatting style throughout the project. Use spaces around operators, after commas, and after colons. Use a single space between keywords and opening parentheses. Use a single space between the ",(0,i.jsx)(n.code,{children:"//"})," characters and the comment text."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"if (condition) {\n    // Code here\n} else {\n    // Code here\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"null-checking",children:"Null Checking"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Null Checking"}),": Use null checking to handle null values. Check for null values before accessing properties or methods on an object. Use the null-conditional operator (",(0,i.jsx)(n.code,{children:"?."}),") to safely access properties or methods on an object that may be null."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"if (customer != null) {\n    var fullName = customer.FullName;\n}\n\nvar fullName = customer?.FullName;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions",children:"C# Coding Conventions (C# Programming Guide)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.dofactory.com/reference/csharp-coding-standards",children:"C# Coding Standards and Naming Conventions"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},5710:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var i=s(758);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);